{"version":3,"sources":["webpack://todo-list/./src/pages/index.js"],"names":["useState","value","isCompleted","todoList","settodoList","textVal","setTextVal","hideCompleted","sethideCompleted","updateInput","event","key","target","className","type","name","placeholder","onChange","onKeyPress","id","map","item","index","checked","tempTodos","toggleCompletion","onClick","slice","removeTodo","role"],"mappings":"sIAqFA,UAhFkB,WAChB,OAAgCA,cAAS,CAAC,CACpCC,MAAM,aACNC,aAAa,KAFZC,EAAP,KAAiBC,EAAjB,KAIA,GAA8BJ,cAAS,IAAhCK,EAAP,KAAgBC,EAAhB,KACA,GAA0CN,eAAS,GAA5CO,EAAP,KAAsBC,EAAtB,KAQA,SAASC,EAAYC,GAEA,UAAdA,EAAMC,KAA+B,KAAZN,GAC1BD,GAAY,SAAAD,GAAQ,wBAAQA,GAAR,CAAkB,CAClCD,aAAa,EACbD,MAAOS,EAAME,OAAOX,YAExBK,EAAW,KAETA,EAAWI,EAAME,OAAOX,OAgChC,OACE,4BACA,uBAAKY,UAAU,aACX,2BACI,uCACA,yBACIA,UAAU,QACVC,KAAK,OACLC,KAAK,aACLC,YAAY,WACZf,MAAOI,EACPY,SAAUR,EACVS,WAAYT,EACZU,GAAG,eAEP,sBAAIN,UAAU,YAlCbV,EAASiB,KAAI,SAACC,EAAMC,GACvB,OACI,sBAAIT,UAAS,cAAeN,GAAiBc,EAAKnB,YAAc,SAAW,IAAMS,IAAKW,GAClF,uBAAKT,UAAU,mBACX,yBACEC,KAAK,WACLS,QAASF,EAAKnB,YACde,SAAU,kBAhBhC,SAA0BK,GACtB,IAAIE,GAAS,OAAOrB,GAChBkB,EAAI,iBAAOG,EAAUF,IACzBD,EAAKnB,aAAgBmB,EAAKnB,YAC1BsB,EAAUF,GAASD,EACnBjB,EAAYoB,GAWsBC,CAAiBH,IACjCP,KAAMM,EAAKpB,MACXA,MAAOoB,EAAKpB,QAEd,uBAAKY,UAAWQ,EAAKnB,YAAc,QAAU,IAA7C,IAAmDmB,EAAKpB,MAAxD,MAEJ,0BAAQyB,QAAS,kBAzCjC,SAAoBJ,GAChBlB,GAAY,SAAAD,GACR,MAAM,GAAN,eAAWA,EAASwB,MAAM,EAAEL,KAA5B,OAAuCnB,EAASwB,MAAML,EAAM,QAuC7BM,CAAWN,IAAQT,UAAU,cAAa,wBAAMgB,KAAK,OAAX,WAwBvE,0BAAQH,QAAS,kBAAMlB,GAAkBD,MAAoBA,EAAgB,OAAS,QAAtF","file":"component---src-pages-index-js-b7ba7abcb3e139b23e88.js","sourcesContent":["import * as React from \"react\"\r\nimport {useState} from \"react\";\r\nimport '../styles.css';\r\n\r\n// markup\r\nconst IndexPage = () => {\r\n  const [todoList, settodoList] = useState([{\r\n        value: `first todo`,\r\n        isCompleted: false\r\n  }]);\r\n  const [textVal, setTextVal] = useState('');\r\n  const [hideCompleted, sethideCompleted] = useState(false);\r\n\r\n  function removeTodo(index) {\r\n      settodoList(todoList => {\r\n          return [...todoList.slice(0,index), ...todoList.slice(index+1)];\r\n      });\r\n  }\r\n\r\n  function updateInput(event) {\r\n      // Add to list if key is Enter\r\n      if(event.key === 'Enter' && textVal !== '') {\r\n        settodoList(todoList => [...todoList, {\r\n            isCompleted: false,\r\n            value: event.target.value\r\n        }]);\r\n        setTextVal('');\r\n      } else {\r\n          setTextVal(event.target.value);\r\n      }\r\n  }\r\n\r\n  function toggleCompletion(index) {\r\n      let tempTodos = [...todoList];\r\n      let item = {...tempTodos[index]};\r\n      item.isCompleted = (!item.isCompleted);\r\n      tempTodos[index] = item;\r\n      settodoList(tempTodos);\r\n  }\r\n\r\n  function populateTodo() {\r\n      return todoList.map((item, index) => {\r\n          return (\r\n              <li className={`todo-item ${hideCompleted && item.isCompleted ? 'hidden' : ''}`} key={index}>\r\n                  <div className=\"todo-item__text\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={item.isCompleted}\r\n                        onChange={() => toggleCompletion(index)}\r\n                        name={item.value}\r\n                        value={item.value}\r\n                      />\r\n                      <div className={item.isCompleted ? 'muted' : ''}> {item.value} </div>\r\n                  </div>\r\n                  <button onClick={() => removeTodo(index)} className=\"remove-btn\"><span role=\"img\">x</span></button>\r\n              </li>\r\n          )\r\n      });\r\n  }\r\n\r\n  return (\r\n    <main>\r\n    <div className=\"container\">\r\n        <div>\r\n            <h1>Todo List</h1>\r\n            <input\r\n                className=\"input\"\r\n                type=\"text\"\r\n                name=\"input-todo\"\r\n                placeholder=\"Add todo\"\r\n                value={textVal}\r\n                onChange={updateInput}\r\n                onKeyPress={updateInput}\r\n                id=\"todo-input\"\r\n            />\r\n            <ul className=\"todolist\">\r\n                {populateTodo()}\r\n            </ul>\r\n            <button onClick={() => sethideCompleted(!hideCompleted)}>{`${hideCompleted ? 'Show' : 'Hide'} Completed`}</button>\r\n        </div>\r\n    </div>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default IndexPage"],"sourceRoot":""}